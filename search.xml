<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python 语法基础]]></title>
    <url>%2F2018%2F06%2F03%2FPython%20%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[python基础语法摘要1234变量数据类型字符串的格式化表达式和运算符 python 的变量1. 变量的声明var_name = var_valuevar1 = var2 = var3 = var_valuevar1,var2,va3 = v1,v2,v3 2. python中变量值的互换两个变量交换值操作a = 1b = 2a,b = b,a 3. 变量的三个常用操作 获取变量的值 — 可直接通过变量名获取用法：变量名 查看数据类型 使用type()函数用法：type(变量名) 获取变量在内存中的id标识 使用id()函数用法：id(变量名) 系统中保留关键字：[&apos;False&apos;, &apos;None&apos;, &apos;True&apos;, &apos;and&apos;, &apos;as&apos;, &apos;assert&apos;, &apos;break&apos;, &apos;class&apos;, &apos;continue&apos;, &apos;def&apos;, &apos;del&apos;, &apos;elif&apos;, &apos;else&apos;, &apos;except&apos;, &apos;finally&apos;, &apos;for&apos;, &apos;from&apos;, &apos;global&apos;, &apos;if&apos;, &apos;import&apos;, &apos;in&apos;, &apos;is&apos;, &apos;lambda&apos;, &apos;nonlocal&apos;, &apos;not&apos;, &apos;or&apos;, &apos;pass&apos;, &apos;raise&apos;, &apos;return&apos;, &apos;try&apos;, &apos;while&apos;, &apos;with&apos;, &apos;yield&apos;] 查看方式：import keyword #引入关键字模块keyword.kwlist #查询python系统当前正在使用的保留关键字 Python的数据类型Python中可以自定义数据类型,可以具有无限种数据类型。系统默认提供6个标准数据类型： Number类型(数值) String类型（字符串） List类型 (列表) tuple类型(元组) Dictionary类型(字典) Set类型（集合） Number类型Number类型主要包含数学相关的数据：一共分为4种小类型： 整型整型就是整数。包括正整数负整数和0二进制（0b开头）变量 = 0b10101八进制（0o开头）变量 = 0o777十进制（不需要）变量 = 250十六进制（0x开头）变量 = 0xabcd 浮点型浮点型就是小数。使用小数表示浮点数 float1 = 3.141592653科学计数法表示浮点数float2 = 314e-2 # 314*10的-2次方 复数什么是复数。 复数由实数和虚数两部分组成，其中真正存在的数字就是实数，假定一个数的平方=-1 那么这个数就是虚数的基本单位表达式方式：163+2j 这就是一个典型的复数使用复数功能结构com2 = complex(15,3) 布尔类类型布尔值就是表示确定或者否定的数据类型，只有2个值：True和False 在python当中没有真正的布尔类型，而是使用数字0来表示False，数字1表示True，所以bool是Number类型 String类型字符串就是文字类型 字符串的声明：1) 单引号声明字符串变量 = ‘值’2) 双引号声明字符串变量 = “值”3) 三引号声明变量变量 = ‘’’值’’’或者变量 = “””值”””三引号声明字符串的方式适合大数据的字符串，多行数据都适合 注意事项：单引号中不可以直接使用单引号 双引号中不可以直接使用双引号 三引号中可以随意使用单双引号 字符串的转义操作：使用特定格式，表示特定意义和功能的字符就是转义字符。以上三种声明字符串方式均可以转义字符。1) 转义字符 描述(在行尾时) 续行符\ 反斜杠符号\’ 单引号\” 双引号\a 响铃\b 退格(Backspace)\e 转义\000 空\n 换行\v 纵向制表符\t 横向制表符\r 回车\f 换页\oyy 八进制数，yy代表的字符，例如：\o12代表换行\xyy 十六进制数，yy代表的字符，例如：\x0a代表换行\other 其它的字符以普通格式输出2) 不同的操作系统使用\n和\r进行换行操作，window和linux操作系统window \n即可linux \n\r List类型 (列表)列表就是一系列数据的顺序组合. 列表格式：变量 = [值,值,值….]例子：list1 = [‘张全蛋’,’赵铁柱’,’王者荣耀’,’英雄联盟’,’AA’,123,12]列表的标志符号是[] tuple类型(元组)元组也是一些列数据的顺序组合，但是所有数据禁止修改，元组是一种特殊的列表 元组格式变量 = (值，值，值…..)或者变量 = 值，值，值…..元组的标志符号是逗号不是() Dictionary类型(字典)字典类型就是一个完整的数据由标志和值组成的多数据的组合，没有顺序 字典格式：变量 = {键:值,键:值….}键就是标志或者说是目录值就是真实的值字典的标志符号是{} Set类型（集合）集合就是一组数据的无序组合。集合中的数据永远是唯一的数据 集合的格式：变量 = {值,值,值…}没有特定的标识符号就是和字典一样使用{} 数据类型转换数据类型转换分为两大类： 自动类型转换自动类型转换就是在程序需要的时候将数据进行类型改变而进行的操作。特征：1) 自动类型转换由程序 根据需要自动进行，不需要人工干预2) 自动类型转换发生在运算或者判断过程当中3) 类型转换会向着更加精确的类型进行转换 强制类型转换强制类型转换是根据程序需要，由程序员通过操作强制改变数据的类型。1) int（） 强制将数据转化为整型① 纯数字字符串转化为整型时，类型改变，值不变② 只有纯整数字符串才可以转换，其他均不可以③ 浮点型可以转化为整型，去掉小数点后面的部分2) float() 强制将数据转化为浮点型① 整数字符串和浮点数字符串均可以转化为浮点型② 转化过程中类型改变，值不变③ 整型也可以用于浮点型转换3） complex（） 生成一个复数4） bool() 强制将数据转化为布尔值能够转化为布尔值False的情况：① 字符串 空字符串 ② 整型 0 ③浮点型 0.0 ④ 复数 0+0j ⑤ 布尔值 Flase ⑥ 列表 [] 空列表 ⑦ 元组 () 空元组 ⑧ 字典 {} 空字典 ⑨ 集合 set（）空集合 5） str() 字符串类型转换所有数据类型都可以转换为字符串，转换规则就是在原有数据基础上加了引号变成了字符串的格式。例如：[1，2，3] =“[1，2，3]”6） list() 将其他数据转换为列表类型能够进行list转换的数据类型只有4种str 字符串 set 集合tuple 元组 dict 字典所有可以进行list转换的数据必须是iterable数据 7）tuple() 将其他数据类型转换为元组类型能够进行tuple转换的数据类型只有4种str 字符串 set 集合list 列表 dict 字典所有可以进行tuple转换的数据必须是iterable数据8）dict() 将其他数据转化为字典类型字典类型转换对于转换数据有严格的要求：可以转化的类型有三种：list 列表tuple 元组set 集合以上所有类型的每个数据必须由元组组成，并且每个元组必须有2个值例子： {(‘aa’,’AA’),(‘bb’,’BB’),(‘cc’,’CC’)} [(‘aa’,’AA’),(‘bb’,’BB’),(‘cc’,’CC’)] ((‘aa’,’AA’),(‘bb’,’BB’),(‘cc’,’CC’))9） set() 集合类型转换能够进行set转换的数据类型只有4种str 字符串 tuple 元组list 列表 dict 字典所有可以进行set转换的数据必须是iterable数据 字符串的格式化 利用百分号 % 利用format函数 利用百分号格式化 %d 此处应该放入一个整数 %s 放入一个字符串 1234s = "i love %s"print (s)print ("i love %s"%"KI")print (s%"KIOVEN") i love %s i love KI i love KIOVEN 12345s = "i am %d years old"print (s%18)# 如果出现多个占位符，则相应内容需要用括号括起来s = "i am %s,i am %d years old"print (s%("ouwen",18)) 12i am 18 years oldi am ouwen,i am 18 years old 利用format格式化 123456# 在使用上，以&#123;&#125;和： 代替%号，后面用format带参数完成s = 'i love &#123;&#125;'.format("you")print (s)s = "i am &#123;1&#125; years old,i love &#123;0&#125; and &#123;1&#125; years old".format("tulingxueyuan",24)print (s) 12i love youi am 24 years old,i love tulingxueyuan and 24 years old 表达式和运算符表达式由变量、运算符、数字、数字分组符号（括号）等以能求得数值的有意义排列方法所得的组合。 运算符的分类 算术运算 比较运算/关系运算 赋值运算 逻辑运算 位运算 成员运算 身份运算 算数运算 + - * / %(取余) //(地板除，取商) **幂运算 注意：python中没有自增自减的 ++ 或者– 运算 比较运算 == ！= &gt; &lt; &gt;= &lt;= 注意：在python中没有 === 和 ！== 运算，只要类型不同就是不等于 赋值运算 = += -= = /= //= **= 注意：a = b 转换之后的表达式为 a = a * b 无论何种赋值运算都符合这个格式 逻辑运算逻辑运算是布尔值之间的运算。①. and 与运算：有假则假②. or 或运算：有真则真③. not 非运算:真变假，假变真 位运算位运算就是在二进制基础上进行的逻辑运算，将0视为False，将1 视为True进行的运算1） &amp; 按位与运算:将数据转化为2进制数据然后进行每个位上的逻辑与运算2 ）| 按位或运算:将数据转化为2进制数据然后进行每个位上的逻辑或运算3） ～ 按位非运算:将数据转化为2进制数据然后进行每个位上的逻辑非运算注意：按位非运算之后计算机会进行反码和补码的相关操作之后进行数据存储。4） ^ 按位抑或运算:将数据转化为2进制数据然后进行每个位上的逻辑抑或运算变量 = 值1 ^ 值25） 左移运算:将数据转化为二进制之后，将二进制数据的所有数据向左移动指定的位数变量 = 值 &lt;&lt; 移动位数特征：左移N位相当于乘以2的N次方，此方法速度远高于乘法6） 右移运算将数据转化为二进制之后，将二进制数据的所有数据向右移动指定的位数，如果数据移除右侧边界，则会被删除，实际上相当于采用了地板除！变量 = 值 &gt;&gt; 移动位数特征：右移N位相当于除以2的N次方，舍弃小数部分。此方法速度远高于除法 成员运算1） in 检测一个值在指定的序列类型里面格式： 值 in 可迭代序列2） not in 检测一个值是否不再指定的序列里面格式： 值 not in 可迭代序列 身份运算1） is 检测值1是不是和值2在内存中是否是同一个值，类似id()功能格式: 数据1 is 数据22） is not 检测值1是不是和值2在内存中是否不是同一个值，类似id()功能格式: 数据1 is not 数据2 检测数据归属1) type() 测试时可以使用，开发尽量避免使用格式：type(变量)2) isinstance() 检测一个数据是否由指定的类型创建格式：isinstance(变量，检测的类型) 运算优先级问题 1234567891011121314** 指数 (最高优先级) ~ + - 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) * / % // 乘，除，取模和取整除 + - 加法减法 &gt;&gt; &lt;&lt; 右移，左移运算符 &amp; 位 'AND' ^ | 位运算符 &lt;= &lt; &gt; &gt;= 比较运算符 == != 等于运算符 = %= /= //= -= += *= **= 赋值运算符 is is not 身份运算符 in not in 成员运算符 not or and 逻辑运算符 注意：我们并不推荐死记硬背优先级，在实际使用中最好使用()解决优先级问题 流程控制 分支结构 循环结构分支结构/选择结构 单项分支 1234 if 条件表达式： ... ``` 2. 双向分支 if 条件表达式: …else: …1234特征： 1) 双向分支有2个区间，分别是True控制的if区间(真区间)和False控制的else区间(假区间) 2) if区间内容必须完全缩进，否则出现语法问题 3. 多项分支 if 条件表达式： …elif 条件表达式: …elif 条件表达式： …else: …123456特征: 1) 无论什么样的分支，有多少个分支，分支结构只会执行其中一个分支，然后就会结束分支结构 2) 多项分支的条件判断是自上而下逐个判断的，True就执行这个分支，False就不执行这个分支 4. 巢状分支 巢状分支就是多个其他if...else分支的嵌套组合。 既可以在if区间嵌套，也可以在else区间嵌套或者elif区间嵌套 if x &lt; 5: print(‘x真的小于5哦’) if y &lt; 6: print(‘如果y &lt; 6，我会被输出’) elif y &gt; 6: print(‘如果上y大于6，我会被输出’)elif x &gt; 5: print(‘x大于5’)1234567891011121314151617181920注意：：在python中并没有switch...case分支。后期可以使用字典和函数的组合来代替。### 循环结构 1. while循环``` 1）格式1： while 条件表达式: ... 2）格式2：while 条件表达式： ... else: ...3）死循环:while True: ...``` 2. for循环 for ... in 循环 1） 格式1:for 变量 in 序列: 。。。2） 格式2:for 变量1,变量2.. in 多层序列： 。。。3） 格式3：for 变量 in 序列：: 。。。else: 。。。123456789101112131415161718193. 其他流程控制语句 1) break 破坏，结束，打破 作用：结束程序循环，一旦程序执行了break语句，那么当前break所在的循环就会被终止。 2) continue 继续 作用：结束本次循环，开始下一次的循环，他不会终止整个循环，仅对于循环中的某次循环有效 3) pass 通过，忽略 作用：在程序结构中有时不需用写任何python内容，但是如果没有内容，语言结构会出现语法错误！pass可以作为语法占位符使用，pass语句没有任何意义，也不会做任何操作# 函数### 函数的特征- 函数的定义必须使用def关键字- 函数不调用不会被执行### 函数的定义 1. 最基本的函数结构 def 函数名()： …调用函数： 函数名()12. 具有参数的函数结构 def 函数名(参数名，参数名…): …调用函数: 函数名(值,值…)1234声明函数的()中的参数称之为形参，形参表示形式上的参数 调用函数的()中的参数称之为实参，实参表示真实的值 注意:实参传递值给形参的过程，本质上就是普通的变量赋值 3. 具有默认值参数的函数 def 函数名(形参名 = 默认值,形参名 = 默认值…): … 调用函数1：函数名()调用函数2:函数名(实参,实参…)123456789101112注意:具有默认值的函数，调用时如果不提供实参，则会使用形参的默认值执行，如果提供了实参，则使用实参而忽略默认值### 函数文档函数文档的作用是对当前函数提供使用相关的参考信息。1. 查看函数文档： 1) 使用help(函数名)，可以查看函数文档信息，查看信息时信息会换行 2) 使用函数名.__doc__的方式查看，查看信息时信息不会换行，会显示\n 3) 自定义函数文档： 在函数内部开始的第一行使用字符串定义文字内容即可 def 函数名()： &apos;此处书写函数文档信息，单引号中使用\n换行&apos; 函数中的其他代码... 函数中的其他代码... 或者 def 函数名(): ‘’’ 此处书写函数文档信息 此处书写函数文档信息 … 函数中的其他代码... 函数中的其他代码... 123456789101112131415161718192021222324### lambda表达式lambda表达式就是一种简洁格式的函数而已。lambda不是一种函数结构，只是一种表达式而且不需要函数名。（匿名函数） 格式： 变量 = lambda 形参,形参...： 功能代码 案例： lambda x,y :x*y # 传入两个参数返回这两个数的乘积、 lambda x： 值1 if 条件表达式 else 值2 #根据条件表达式的真假返回值1还是值2 优点： 1.lambda表达式书写简单，不用def关键字，可惜要用lambda 2.lambda表达式不需要函数名，省得命名头疼 3.看起来比较装逼！ 缺点： 1.lambda表达式功能受限，无法使用循环以及部分流程控制相关语句 2.lambda表达式不适合较为复杂的程序。 ### 关键字参数 def 函数名(形参名 = 默认值,形参名 = 默认值…): … 调用函数：函数名(形参名 = 实参值,形参名 = 实参值…)123优点:由于实参和形参传递是按照位置一一对应的关系，当参数太多时容易出现参数传错位置的情况 引入关键字参数后，在设置实参时可以指定形参的名称，避免参数传递错误！### 收集参数1. 收集参数1 (专用于收集非关键字参数) def 函数名(*形参名)： …调用函数： 函数名(实参,实参….)123456```注意: 1) 使用收集参数进行形参的书写，需要在形参名之前添加* 2) *形参格式的收集参数会收集到调用函数时传入的所有没有关键字的形参 3) 收集参数收集到的最终数据是由所有非关键字实参组成的元组。 4) 收集参数和普通的参数（关键字参数）可以共存 收集参数2 (专门用于收集关键字参数)123def 函数名(**args): ...调用函数：函数名(形参名 = 值,形参名=值...) 12345注意1) 使用收集参数收集关键字实参的方法需要在形参名之前加** 2) **形参格式会收集调用函数时传入函数的所有关键字参数 3) 收集的所有关键字参数最终组成的数据为字典类型 4) 关键字参数收集的方式可以和普通形参共存，但是必须在最后 注意1：普通形参，非关键字收集形参和关键字收集形参具有顺序关系普通形参放最前面非关键字形参放中间关键字形参放最后注意2：所有收集参数只能够收集没有形参接受的实参 函数的变量作用域全局变量:在函数外部声明的变量就是全局变量局部变量:在函数内部声明的变量就是局部变量 局部变量和全局变量的作用范围1) 全局变量在全局范围内可以使用2) 全局变量在局部范围内可以使用(访问)3) 局部变量在局部范围内可以使用4) 局部变量在全局范围内无法正常使用 global 关键字global 关键字的作用是提升局部变量为全局变量1234def 函数名(): ... #提升局部变量为全局变量 global 局部变量 全局变量和局部变量同名在此情况下,局部环境中只会使用局部变量,忽略同名的全局变量 内部函数在函数内部声明的函数就是内部函数特征:1) 内部函数在函数内部可以访问2) 内部函数的调用必须在定义内部函数之后3) 内部函数不可以在函数外部调用4) 本质上内部函数等同于内部变量 闭包闭包就是将函数内部的局部变量或者内部函数,弄到函数外,并且可以正常使用的特殊方法.突破了局部作用域的限制!注意:闭包少用!闭包格式： 1234567def 外层函数()： 局部变量 局部变量 def 内部函数()： pass return (局部变量，局部变量...内部函数,内部函数...) nonlocal关键字nonlocal的作用是声明当前变量不是当前函数内部的变量，他有可能是当前函数的外部变量（不是全局变量） 123456789101112def 外部函数() 局部变量 def 内部函数（）: nonlocal 变量名#声明当前变量不是内部函数中的变量 其他代码... return 代码 递归函数在函数中调用当前函数本身的函数就是递归函数。 示例：12345678910111213def recursion(n): #输出当前的n的值 print(n) #判断n的值是否&gt;0,决定下一步操作 if n&gt;0: #n&gt;0 在此调用当前函数digui，将n - 1放进去 recursion(n-1) else: #n&gt;0 为False 输出分隔线 print(&apos;------&apos;) #再次输出n的值 print(n) recursion(3) 执行结果: 3 2 1 0 ----- 0 1 2 3]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
